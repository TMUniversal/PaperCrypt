version: "3"

tasks:
  build:
    desc: Build the app
    deps:
      - deps:goreleaser
    sources:
      - "*.go"
      - "**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "bin/papercrypt{{exeExt}}"
    dotenv:
      - .env
    cmds:
      - bash -c "mkdir -vp bin"
      - goreleaser build --snapshot --clean --single-target --output bin/papercrypt{{exeExt}}

  test:
    desc: Run the tests
    deps:
      - build
    vars:
      WITH_COVERAGE: "0"
    cmds:
      - go vet ./...
      - >-
        go test -v ./... -coverprofile=coverage.out -covermode=atomic
        && bash -c 'if [ -n "${WITH_COVERAGE}" ]; then go tool cover -html=coverage.out -o coverage.html; fi'
        && rm coverage.out
      # full pipeline test: generate pdf > extract images > find qr code > read qr code > decode document > compare to input
      # requires pdftoppm, which can be installed with `sudo apt-get install -y poppler-utils`
      # if running on windows, install it in WSL
      - >-
        bash -c 'echo "{\"message\":\"Hello, world!\"}" > test-in.json
        && cat test-in.json
        | bin/papercrypt{{exeExt}} generate --purpose "Test" --comment "Test" --passphrase "test"
        | pdftoppm -png -r 300 - t
        && cat t-1.png
        | bin/papercrypt{{exeExt}} qr
        | bin/papercrypt{{exeExt}} decode -f -o test.json --passphrase "test"
        && diff -u test.json test-in.json
        && echo "Successfully reconstructed input document."
        ; rm -f test.json test-in.json t-*.png'

  release:
    desc: Create a release. Will install goreleaser through go install if not present in PATH.
    dotenv:
      - .env
    deps:
      - deps:goreleaser
    cmds:
      - goreleaser release --clean

  reltest:
    desc: Create a test release. Will install goreleaser through go install if not present in PATH.
    dotenv:
      - .env
    deps:
      - deps:goreleaser
    cmds:
      - goreleaser release --snapshot --clean --skip-publish

  examples:
    desc: Run the examples
    deps:
      - build
    generates:
      - "examples/output.pdf"
      - "examples/no_qr.pdf"
      - "examples/lowercase.pdf"
      - "examples/phrase.pdf"
    cmds:
      - 'bin/papercrypt{{exeExt}} generate -i examples/input.json -o examples/output.pdf    --force --passphrase "example" --purpose "Example Sheet" --comment "Regular PDF Example"                 && pdfcpu validate -m strict examples/output.pdf'
      - 'bin/papercrypt{{exeExt}} generate -i examples/input.json -o examples/no_qr.pdf     --force --passphrase "example" --purpose "Example Sheet" --comment "PDF without QR Code Example" --no-qr && pdfcpu validate -m strict examples/no_qr.pdf'
      - 'bin/papercrypt{{exeExt}} generate -i examples/input.json -o examples/lowercase.pdf --force --passphrase "example" --purpose "Example Sheet" --comment "Lowercase PDF Example" --lowercase   && pdfcpu validate -m strict examples/lowercase.pdf'
      - "bin/papercrypt{{exeExt}} phraseSheet -fo examples/phrase.pdf ExampleAbcA= && pdfcpu validate -m strict examples/phrase.pdf"

  man:
    desc: Generate man pages
    deps:
      - build
    cmds:
      - "bin/papercrypt{{exeExt}} man"

  deps:goreleaser:
    desc: Install goreleaser
    internal: true
    cmds:
      - "goreleaser --version || go install github.com/goreleaser/goreleaser@latest && goreleaser --version"

  standard_version:
    desc: Generate a changelog
    cmds:
      - "npx --yes standard-version"

  clean:
    desc: Remove all generated files
    cmds:
      - "rm -f *.gen.txt"
      - "rm -rf dist bin man"

  clean:examples:
    desc: Remove all generated files
    cmds:
      - "rm -f examples/output.pdf examples/no_qr.pdf examples/lowercase.pdf examples/phrase.pdf"

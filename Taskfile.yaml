version: "3"

env:
  GO111MODULE: on
  GOPROXY: https://proxy.golang.org,direct

tasks:
  dev:
    desc: Install git hooks
    cmds:
      - cp -f scripts/pre-commit.sh .git/hooks/pre-commit

  setup:
    desc: Install dependencies
    cmds:
      - go mod tidy

  build:
    desc: Build the app
    run: when_changed
    sources:
      - "./**/*.go"
      - "go.mod"
      - "go.sum"
    generates:
      - "./papercrypt{{exeExt}}"
    cmds:
      - go build

  test:
    desc: Run tests
    vars:
      TEST_OPTIONS: '{{default "" .TEST_OPTIONS}}'
      SOURCE_FILES: '{{default "./..." .SOURCE_FILES}}'
      TEST_PATTERN: '{{default "." .TEST_PATTERN}}'
    cmds:
      - go vet ./...
      - go test {{.TEST_OPTIONS}} -failfast -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.txt {{.SOURCE_FILES}} -run {{.TEST_PATTERN}} -timeout=5m
      # full pipeline test: generate pdf > extract images > find qr code > read qr code > decode document > compare to input
      # requires pdftoppm, which can be installed with `sudo apt-get install -y poppler-utils`
      # if running on windows, install it in WSL
      - >-
        bash -c 'echo "{\"message\":\"Hello, world!\"}" > test-in.json
        && cat test-in.json
        | go run . generate --purpose "Test" --comment "Test" --passphrase "test"
        | pdftoppm -png -r 300 - t
        && cat t-1.png
        | go run . qr
        | go run . decode -f -o test.json --passphrase "test"
        && diff -u test.json test-in.json
        && echo "Successfully reconstructed input document."
        ; rm -f test.json test-in.json t-*.png'

  cover:
    desc: Open the cover tool
    cmds:
      - go tool cover -html=coverage.txt

  fmt:
    desc: gofumpt all code
    cmds:
      - gofumpt -w -l .

  lint:
    desc: Lint the code with golangci-lint
    cmds:
      - golangci-lint run ./...

  ci:
    desc: Run all CI steps
    cmds:
      - task: setup
      - task: build
      - task: test

  release:
    desc: Create a release. Will install goreleaser through go install if not present in PATH.
    cmds:
      - "npx -p @semantic-release/changelog -p @semantic-release/exec -p @semantic-release/git semantic-release"

  reltest:
    desc: Create a test release. Will install goreleaser through go install if not present in PATH.
    cmds:
      - goreleaser release --snapshot --clean --skip=publish

  docs:examples:
    desc: Run the examples
    deps:
      - build
    generates:
      - "examples/output.pdf"
      - "examples/no_qr.pdf"
      - "examples/lowercase.pdf"
      - "examples/phrase.pdf"
    cmds:
      - 'bin/papercrypt{{exeExt}} generate -i examples/input.json -o examples/output.pdf    --force --passphrase "example" --purpose "Example Sheet" --comment "Regular PDF Example"                 && pdfcpu validate -m strict examples/output.pdf'
      - 'bin/papercrypt{{exeExt}} generate -i examples/input.json -o examples/no_qr.pdf     --force --passphrase "example" --purpose "Example Sheet" --comment "PDF without QR Code Example" --no-qr && pdfcpu validate -m strict examples/no_qr.pdf'
      - 'bin/papercrypt{{exeExt}} generate -i examples/input.json -o examples/lowercase.pdf --force --passphrase "example" --purpose "Example Sheet" --comment "Lowercase PDF Example" --lowercase   && pdfcpu validate -m strict examples/lowercase.pdf'
      - "bin/papercrypt{{exeExt}} phraseSheet -fo examples/phrase.pdf ExampleAbcA= && pdfcpu validate -m strict examples/phrase.pdf"

  completions:
    desc: Generate shell completions. Running on Windows requires Go installed in WSL.
    generates:
      - completions/papercrypt.bash
      - completions/papercrypt.fish
      - completions/papercrypt.zsh
    cmds:
      - bash -c "./scripts/completions.sh"

  manpages:
    desc: Generate man pages. Running on Windows requires Go installed in WSL.
    generates:
      - manpages/papercrypt.1.gz
    cmds:
      - bash -c "./scripts/manpages.sh"

  clean:
    desc: Remove all generated files
    cmds:
      - "rm -f *.gen.txt"
      - "rm -rf dist bin manpages completions"

  clean:examples:
    desc: Remove all generated files
    cmds:
      - "rm -f examples/output.pdf examples/no_qr.pdf examples/lowercase.pdf examples/phrase.pdf"
